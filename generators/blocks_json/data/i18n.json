{"languages": {"pl-PL": "Polish", "ko-KR": "Korean", "ja-JP": "Japanese", "it-IT": "Italian", "fr-FR": "French", "es-MX": "Spanish (Mexico)", "es-ES": "Spanish (Spain)", "en-US": "English", "zh-TW": "Chinese (Taiwan)", "zh-CN": "Chinese (Simplified)", "ru-RU": "Russian", "pt-BR": "Portuguese", "de-DE": "German", "ar-SA": "Arabic"}, "generic": {"modify": "MODIFY", "delete": "DELETE", "create": "CREATE", "close": "CLOSE", "customize": "CUSTOMIZE", "confirm": "CONFIRM", "change": "CHANGE", "select": "SELECT", "cancel": "CANCEL", "ok": "OK", "save": "SAVE", "no": "NO", "yes": "YES", "off": "OFF", "on": "ON", "read-more": "READ MORE", "view-less": "VIEW LESS", "view-more": "VIEW MORE", "duplicate": "DUPLICATE", "reset": "RESET", "add": "ADD", "finish": "Finish", "report": "REPORT", "new": "New!", "remove": "REMOVE"}, "rules": {"variables": {"delete-variable-body": "Delete {{nr}} uses of the variable '{{name}}'?", "delete-variable": "Delete Variable", "already-exists": "Variable with same name and type already exists", "name-requirements": "Variable name can only include _, a-Z and 0-9", "rename-title": "Rename Variable", "create-title": "Create Variable", "new-variable": "NEW VARIABLE", "no-variables": "No Variables", "header": "VARIABLES", "object-header": "OBJECT ({{nr}} / {{max}})", "global-header": "GLOBAL ({{nr}} / {{max}})", "too-many": "Already reached max limit of allowed variables of selected type"}, "subroutines": {"delete-subroutine-body": "Delete {{nr}} instances of the '{{name}}' subroutine?", "delete-subroutine": "Delete Subroutine", "create-subroutine": "Create Subroutine", "already-exists": "Subroutine with same name already exists", "name-requirements": "Subroutine name can only include _, a-Z and 0-9", "remove-parameter": "Remove parameter", "edit-subroutine": "Edit Subroutine", "add-parameter": "Add parameter", "parameters": "Parameters", "no-parameters": "No parameters"}, "not-supported": "The Rules Editor is not supported on this screen size.", "export-mod": "Export Mod", "export-workspace": "Export Workspace", "import-workspace": "Import Workspace"}, "editor": {"manage": {"valid-playground": "Valid Experience", "generation-warning": "Unavailable on some platforms", "validation-title": "Validation", "reset-question": "Are you sure you want to reset this Experience?", "playground-name": "Name", "no-playground-text": "Experience Failed To Load", "share-button": "Show Code", "maps-error": "No maps chosen", "tags-title": "Tags", "no-description-error": "Experience description cannot be empty", "no-name-error": "Experience name cannot be empty", "report-suite": {"require-email": "Email is required", "invalid-email": "Invalid email", "description": "Reporting an experience will submit it for review to our moderation team.", "categories": {"OFFENSIVE_NAME": "Offensive Name", "OFFENSIVE_CHAT": "Offensive Chat", "SPAM": "Spam", "HARASSMENT": "Harassment", "CHEATING": "Cheating", "UNKNOWN_CATEGORY": "Unknown", "CHILD_SOLICITATION": "Child Solicitation", "SEXUALLY_EXPLICIT": "Sexually Explicit", "HATE_SPEECH": "Hate Speech", "PLAGIARISM": "Plagiarism", "OFFENSIVE": "Offensive", "VIOLENT": "Violent", "INAPPROPRIATE": "Inappropriate", "ADVERTISING": "Advertising", "DOXING": "Doxing", "SUICIDE_THREAT": "Suicide Threat", "CLIENT_HACK": "Client Hack", "TERRORIST_THREAT": "Terrorist Threat"}, "subject-placeholder": "Note...", "subject-header": "NOTE", "reason-placeholder": "Report Category", "reason-header": "REASON", "email-placeholder": "Email", "email-header": "EMAIL", "title": "REPORT EXPERIENCE?", "submit-error": "There was an error submitting your request. Please try again."}, "duplicate": "DUPLICATE EXPERIENCE", "reset": "RESET EXPERIENCE", "report": "REPORT EXPERIENCE", "delete-confirmation": "Are you sure you want to delete this Experience?", "delete": "DELETE EXPERIENCE", "max-description-error": "Experience description canot exceed {{ max }} characters", "max-name-error": "Experience name cannot exceed {{ max }} characters", "save-copy": "SAVE COPY", "experience-description-tooltip": "Add a short description about what makes this Experience special. *Required", "experience-name-tooltip": "Give your experience a short but descriptive name so others can identify it. *Required", "heading": "Manage Experience", "characters-error": "Name and Description fields can only include Latin characters.", "duplicate-confirmation": "Are you sure you want to duplicate this Experience?", "archived-error": "Duplicate Experience to Edit", "alternate-maps-error": "You must have at least one map added to the rotation.", "validation-error": "Validation Error"}, "package": {"tab-header": {"by-progression": "By Progression", "by-class": "Class", "by-type": "{{itemType}} Type", "all": "All ({{numberOfItems}})", "filter": "FILTER", "team-2": "Team 2", "team-1": "Team 1", "any": "ANY", "progression": {"unlocked": "UNLOCKED", "locked": "LOCKED"}}, "characters": {"team-header": "Characters", "change-faction-warning": "If you change your Faction selection, you will lose all character selections. Are you sure?", "last-character-warning": "You must have at least one character selected.", "faction-select": "Faction"}, "maps": {"drag-and-drop-empty": "Drag and Drop maps to add to the rotation", "playground-map-rotation": "Map Rotation - {{ current }}/{{ max }}", "add-maps-rotation": "Add maps to rotation - {{ current }}/{{ max }}", "delete-map": "Remove map", "add-map": "Add map", "available-maps": "Available maps", "add-map-mobile-prompt": "Add a map to continue", "name-overrides": {"mp_longhaul-weighstation": "MANIFEST: WEIGH STATION", "mp_kaleidoscope-memorialpark": "KALEIDOSCOPE: MEMORIAL PARK", "mp_oasis-dunes": "EL ALAMEIN: DUNES", "mp_frost-windmill": "BATTLE OF THE BULGE: WINDMILL"}}, "container": {"link-instruction": "link teams", "unlink-instruction": "unlink teams", "enable-section": "Enabled", "empty-message": "No results \u2013 Try removing filters", "header": "All {{itemSubType}}", "link-warning": "If you link teams, you will lose all your Team 2 selections. Are you sure?", "warning-title": "Warning", "empty-warning": "NOT AVAILABLE", "requires-progress": "Requires Progress", "items-counter": "{{ numberOfActiveItems }}/{{ numberOfItems }}", "unlocked-item-disable-warning": "You may not disable the last Unlocked item without disabling all Locked items first.", "locked-item-disable-warning": "You may not enable a Locked item without enabling an Unlocked item first"}, "era": {"selecting": "selecting...", "change-per-team-warning": "If you change your team, you will lose all your Team 2 character, weapon, vehicle, gadget, and attachment selections. Are you sure?", "change-era-warning": "If you change your team, you will lose all your character, weapon, vehicle, gadget, and attachment selections. Are you sure?", "vs": "VS", "contains-vehicles": "{{era}} Vehicles", "contains-weapons": "{{era}} Weapons", "contains-classes": "{{era}} Classes", "contains": "Contains", "team-one": "Team 1", "team-two": "Team 2", "descriptions": {"game-2042": "Extreme weather events and resource conflicts have shifted the balance of global power. The United States and Russia stand at the brink of war, while a mix of non-patriated combat veterans form independent groups known as Task Forces. Fight to define the future in this never-before-seen theatre of war.", "game-BF3": "In Battlefield 3, Russia and the US come into conflict along the border regions of Iran. Large maps and CQB gunfights both figure in this \"history adjacent\" war between two superpowers. Skirmish on the wide open steppe along the Turkmenistan/Iranian border, to running battles through the ports of the Caspian Sea. You'll need to coordinate all the tools at your disposal to lead your squad to victory.", "game-BC2": "In Battlefield Bad Company 2 you're one of four key squad members \u2013 Assault, Medic, Recon and Engineer. The growing conflict between the US and Russia takes you from the jungles surrounding Valparaiso, Chile to the arid desert of Arica Harbor.", "game-1942": "Return to where it started. Relive the frozen Battle of the Bulge, where Axis and Allied forces squared off in the snowy forests of Belgian Ardennes. The action heats up when allied Shermans roll against German Panzers on their way to Alexandria. Relive history, Battlefield-style.", "DEFAULT": "All characters, weapons, vehicles, gadgets and attachments are locked to the Factions specific to the map. They cannot be modified."}, "options": {"game-2042": "Battlefield 2042", "game-BC2": "Bad Company 2", "game-BF3": "Battlefield 3", "game-1942": "Battlefield 1942", "DEFAULT": "Map Default"}, "contains-specialists": "{{era}} Specialists", "mobile-pick-team-title": {"team-2": "Picking Team 2...", "team-1": "Picking Team 1...", "ffa": "Picking Team..."}, "mobile-edit-team-button": {"team-2": "Edit Team 2", "team-1": "Edit Team 1", "ffa": "Edit Team"}}, "factions": {"1942_US": "Battlefield 1942 US", "DEFAULT": "Map Default", "KIN_RU": "Battlefield 2042 RUS", "KIN_US": "Battlefield 2042 USA", "BF3_RU": "Battlefield 3 RUS", "BF3_US": "Battlefield 3 USA", "BC2_RU": "Bad Company 2 RUS", "BC2_US": "Bad Company 2 USA", "1942_GER": "Battlefield 1942 GER", "1942_UK": "Battlefield 1942 UK"}, "item-types": {"attachment": "Attachment", "gadget": "Gadget", "vehicle": "Vehicle", "weapon": "Weapon"}, "countries": {"KIN_RU": "RUS", "KIN_US": "USA", "BF3_RU": "RUS", "BF3_US": "USA", "BC2_RU": "RUS", "BC2_US": "USA", "1942_GER": "GER", "1942_UK": "UK", "1942_US": "US", "DEFAULT": "Map Default"}, "details-panel": {"descriptions": {"SupportClass": "This {{ itemType }} is only available to players who choose to play the Support Class.", "ReconClass": "This {{ itemType }} is only available to players who choose to play the Recon Class.", "ScoutClass": "This {{ itemType }} is only available to players who choose to play the Scout Class.", "MedicClass": "This {{ itemType }} is only available to players who choose to play the Medic Class.", "EngineerClass": "This {{ itemType }} is only available to players who choose to play the Engineer Class.", "AssaultClass": "This {{ itemType }} is only available to players who choose to play the Assault Class.", "AntiTankClass": "This {{ itemType }} is only available to players who choose to play the Anti-Tank Class.", "locked": "This {{ itemType }} is gated behind in game progress and as a result may not be available to all players by default. You can override this in the Rules Editor.", "AllClass": "This {{ itemType }} is available to all {{ era }} classes.", "multiClass": "This {{ itemType }} is available to players who choose to play: {{ classList }}"}, "description-headers": {"locked": "requires progress"}, "header": "{{ itemType }} info"}, "asset-tag-context-label": "{{ contextLabel }} {{ assetLabel }}"}, "mode": {"team-distribution-title": "Team Distribution", "current-mode-title": "Current Game Mode Details", "mode-settings-title": "{{mode}} Game Mode Details", "game-mode": {"reset-question": "Are you sure you want to reset game mode? All selected maps will be reset.", "change-question": "Are you sure you want to switch game mode? Changing the game mode will reset all customizations."}, "mode-settings": {"ffa-reset": "Are you sure you want to deselect the Free-For-All game mode? All selections will be reset.", "team-reset": "Are you sure you want to deselect a team-based game mode? All selections will be reset."}, "game-size-generation-warning": "Player counts above 64 are not available on some platforms", "conquest-generation-warning": "Conquest Large is not supported on some platforms", "large-maps-warning": "Large-sized maps are not supported on some platforms", "choose-game-mode": "Choose game mode"}, "header": {"game-mode": "Game Mode", "mode-settings": "Mode Settings", "choose-maps": "Choose maps", "manage": "Manage", "rules": "Logic", "gadgets": "Gadgets", "vehicles": "Vehicles", "weapons": "Weapons", "characters": "Characters", "era": "Teams", "attachments": "Attachments", "user-interface": "User Interface", "vehicle": "Vehicle", "soldier": "Soldier", "gameplay": "Gameplay", "modifier-category": "Modifiers", "era-category": "Restrictions", "mode-category": "Core", "ai": "AI", "game-mode-settings": "Game Mode Details", "map-rotation": "Map Rotation"}, "menu": {"manage": "MANAGE", "visual-settings": "Visual Settings", "vehicles": "Vehicles", "vehicle-settings": "Vehicle Settings", "soldier-settings": "Soldier Settings", "weapons": "Weapons", "rules": "RULES EDITOR", "ui": "User Interface", "music-settings": "Music Settings", "ui-settings": "UI Settings", "characters": "Characters", "era": "Team Select", "soldier": "Soldier", "core": "CORE", "gameMode-settings": "Mode Modifiers", "other-settings": "Other Settings", "core-settings": "Core Settings", "general-settings": "General Settings", "general": "GENERAL", "gadgets": "Gadgets", "package": "TEAMS", "mode-settings": "Mode Settings", "choose-maps": "Choose Maps", "game-mode": "Game Mode", "mode": "MODE", "title": "MENU", "ai": "AI", "ai-settings": "AI Settings", "synced-ai-settings": "Synced AI Settings", "open-menu": "Open Menu", "attachments": "Attachments", "vehicle": "Vehicle", "minimize": "MINIMIZE", "series": "Teams", "collection": "RESTRICTIONS", "game-mode-settings": "Game Mode Details", "map-rotation": "Map Rotation", "ai-tuning": "AI", "gameplay": "Gameplay", "modifiers": "MODIFIERS"}, "pending-changes-body": "Are you sure you want to leave this page?", "pending-changes-header": "You have pending changes", "general": {"synced-mutator": "AI SYNCED MODIFIERS", "synced-mutators-description": "By checking this, AI will inherit the same modifier adjustments made to player controlled soldiers. Uncheck this to make adjustments to AI soldiers independent of those made for player soldiers.", "non-owner-warning": "You are currently viewing another user's Experience.  Duplicate it to make edits.", "max-playgrounds-modal-confirm-label": "Browse Experiences", "max-playgrounds-warning": "You cannot create more than {{ max }} Experiences. Would you like to manage your Experiences?", "max-playgrounds-warning-title": "WARNING", "max-vehicle-exceeded": "Maximum number of vehicles has been exceeded. To increase the maximum number of vehicles, set Passenger Seats Modifier to Off.", "max-vehicle-exceeded-gen4-warning": "Maximum vehicle limits reached on older consoles"}, "not-found": "COULD NOT FIND EXPERIENCE", "xp-restrictions": {"types": {"weekly": "Weekly Missions", "ribbon": "Ribbon XP", "mastery": "Mastery XP", "player": "Player XP"}, "levels": {"restricted": "Restricted", "moderate": "Moderate", "full": "Full"}, "tooltip": "Some modifiers may restrict XP and player progression.", "header-warning": "Experience has been reduced to {{restrictionLevel}} XP", "update-message": "Save your changes to update the Restriction Level for this experience.", "unavailable": "Restriction Unavailable"}}, "menu": {"help": "HELP", "logout": "SIGN OUT", "create-playground": "CREATE NEW", "login": "SIGN IN / REGISTER", "playgrounds": "EXPERIENCES"}, "dynamic": {"gamemodes": {"Rush": {"title": "Rush", "desc": "Attackers vs. Defenders. Attackers win by destroying enemy M-COMs. Defenders win by eliminating all enemy reinforcements. Recommended for 32 players."}, "ConquestSmall": {"desc": "Capture the sectors to control the field. Deplete the enemy's reinforcements to win. Recommended for 64 players.", "title": "Conquest"}, "ModBuilderCustom": {"desc": "Two teams face off. Customizable using the Rules Editor.", "title": "Team Deathmatch"}, "Conquest": {"desc": "Capture the sectors to control the field. Deplete the enemy's reinforcements to win. Recommended for 128 players.", "title": "Conquest Large"}, "ModBuilderCustom-2": {"title": "Free-For-All", "desc": "No teams. No friends. Customizable using the Rules Editor."}, "ModBuilderCustom-1": {"desc": "Two teams face off. Vehicles allowed by default. Players spawn on their team HQs. Customizable using the Rules Editor.", "title": "Vehicle Team Deathmatch"}, "ModBuilderCustom-5": {"desc": "Maps optimized for ground vehicles. Capture the sectors to control the field. Customizable using the Rules Editor.", "title": "Ground Superiority"}, "ModBuilderCustom-4": {"desc": "Maps optimized for air vehicles. Capture the sectors to control the skies. Customizable using the Rules Editor.", "title": "Air Superiority"}, "ModBuilderCustom-3": {"desc": "Capture the sectors to control the field. Deplete the enemy's reinforcements to win. Customizable using the Rules Editor.", "title": "Custom Conquest"}, "BreakthroughSmall": {"desc": "Attackers vs. Defenders. Attackers win by capturing objectives. Sector by sector. Defenders win by eliminating all enemy reinforcements. Recommended for 40 players.", "title": "Breakthrough"}, "Breakthrough": {"desc": "Attackers vs. Defenders. Attackers win by capturing objectives. Sector by sector. Defenders win by eliminating all enemy reinforcements. Recommended for 64 players.", "title": "Breakthrough Large"}}}, "footer": {"copyright": "\u00a9 Electronic Arts Inc.", "language": "Language"}, "dialog": {"copy-text": "Copy", "server-code-label": "Experience Code", "share-playground-header": "Show Experience Code", "confirm-header": "Confirm", "alert-header": "Alert"}, "label": {"password": "Password", "description": "DESCRIPTION", "type": "TYPE", "name": "NAME", "vehicle-budget": "Vehicle Budget", "any": "Any", "types": "TYPES"}, "playgrounds": {"no-presets": "Failed To Fetch Official Experiences", "start-fresh": "START FRESH", "dice-playgrounds": "Official Experiences", "my-playgrounds": "My Experiences", "got-new-idea": "GOT A NEW IDEA?", "featured-classic-tag": "DICE Classic {{nr}}", "max-playground-tooltip": "You have reached the maximum number of Experience limit at {{ maxPlaygrounds}}.", "create-new": "Create New", "load-more-button": "Load More", "show-less-button": "Show Less", "custom-game-mode": "Custom", "rush-game-mode": "Rush", "conquest-small-game-mode": "Conquest", "conquest-game-mode": "Conquest Large", "all-game-modes": "All", "title-part-two": "Classics", "title-part-one": "RELIVE The", "banner-header": "BROWSE EXPERIENCES", "create-something-button": "Create something new", "modify-button": "Modify", "cards": {"server-code-prompt": "You can host this Experience by entering this Experience Code in-game.", "server-code": "Experience Code", "card-description": "Description", "play-text": "Show Code", "vs": "VS"}, "banner-description-two": "Customize a classic Battlefield or build something completely new. Discover unexpected battles and change the rules of war.", "banner-description-one": "Our tools. Your rules. Battlefield Portal is a love letter to the most long-standing fans of the franchise. Experience the nostalgia of past Battlefield games, combined with the cutting-edge tech of Battlefield 2042 in fights where anything can happen.", "max-playground-warning": "Experience limit reached. You\u2019ll need to delete an existing Experience to make room for a new one.", "max-playground-title": "Warning", "experience-saved": "Experience saved!", "service-errors": {"delete-playground": "Unable to delete Experience.", "create-playground": "Unable to create Experience.", "report-playground": "Report was not successful.", "update-playground": "Save was not successful.", "share-playground": "Unable to display Experience Code.", "get-playground": "Unable to retrieve Experience.", "list-playgrounds-by-owner": "Unable to retrieve your Experiences."}, "empty-experiences-state": "You haven\u2019t created any experiences yet"}, "index": {"title": "EXPERIENCES"}, "mutators": {"optional-team-2": "Optional: Team 2", "mutator-label": "Modifier", "add-mutator-header": "Add Modifier", "per-team": "Per Team", "team-2": "T2", "team-1": "T1", "hide-description": "hide description", "show-description": "Show description"}, "app": {"please-sign-in": "You must sign in to use the Battlefield Portal Experience Builder.", "status-404": "404 - This page does not exist", "back-to-home": "Back to Portal Home", "sign-in-to-continue": "SIGN IN TO CONTINUE"}, "PYRITE_TOOLBOX_SEARCH": "SEARCH RESULTS", "PYRITE_TOOLBOX_BOOLEAN": "BOOLEAN", "PYRITE_TOOLBOX_NUMBER": "NUMBER", "PYRITE_TOOLBOX_TEXT": "TEXT", "PYRITE_TOOLBOX_UI": "USER INTERFACE", "PYRITE_TOOLBOX_SOLDIER": "SOLDIER", "PYRITE_TOOLBOX_GAMEMODE": "GAME MODE", "PYRITE_TOOLBOX_CONVENIENCE": "CONVENIENCE", "PYRITE_TOOLBOX_LITERALS": "LITERALS", "PYRITE_TOOLBOX_SELECTION_LISTS": "SELECTION LISTS", "PYRITE_TOOLBOX_MATH": "MATH", "PYRITE_TOOLBOX_EVENT_PAYLOADS": "EVENT PAYLOADS", "PYRITE_TOOLBOX_ARRAYS": "ARRAYS", "PYRITE_TOOLBOX_PLAYER": "PLAYER", "PYRITE_TOOLBOX_LOGIC": "LOGIC", "PYRITE_TOOLBOX_GAMEPLAY": "GAMEPLAY", "PYRITE_TOOLBOX_DEV": "DEV", "PYRITE_TOOLBOX_OTHER": "OTHER", "PYRITE_TOOLBOX_SUBROUTINES": "SUBROUTINES", "PYRITE_TOOLBOX_VARIABLES": "VARIABLES", "PYRITE_TOOLBOX_CONTROL_ACTIONS": "CONTROL ACTIONS", "PYRITE_TOOLBOX_RULES": "RULES", "PYRITE_SUBROUTINE": "SUBROUTINE", "PYRITE_NEW_SUBROUTINE": "New Subroutine", "PYRITE_UNSUPPORTED_RULE_EVENT": "Unsupported payload for this Rule Event", "PYRITE_MOD": "MOD", "PYRITE_RULE": "RULE", "PYRITE_NEW_RULE": "New Rule", "PYRITE_CONDITION": "CONDITION", "PYRITE_CONDITIONS": "CONDITIONS", "PYRITE_EVENT": "EVENT", "PYRITE_ACTIONS": "ACTIONS", "PYRITE_OBJECT_GLOBAL": "Global", "PYRITE_EVENT_ONGOING": "Ongoing", "CLEAN_UP": "Clean up Blocks", "HELP": "Help", "UNDO": "Undo", "REDO": "Redo", "DUPLICATE_BLOCK": "Duplicate", "DELETE_BLOCK": "Delete Block", "DELETE_X_BLOCKS": "Delete %1 Blocks", "help": {"mod": {"summary": "Anything you want to work within your custom gamemode must be placed inside this block. You can put blocks you're working on outside of this block but they will not be executed. You can utilize the space outside the **%{PYRITE_MOD}** block as a brainstorming area."}, "abort": {"summary": "Stops the execution of a list of **%{PYRITE_ACTIONS}** in a **%{PYRITE_RULE}**."}, "resupplytypesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_RESUPPLYTYPES}** from the collection of resupply types which can be used with %{ID_ARRIVAL_BLOCK_RESUPPLY}."}, "resupply": {"summary": "Resupplies the target **%{PYRITE_TYPE_PLAYER}** using a provided **%{PYRITE_TYPE_ENUM_RESUPPLYTYPES}**."}, "restrictedinputsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_RESTRICTEDINPUTS}** from the collection of all inputs which can be restricted with %{ID_ARRIVAL_BLOCK_ENABLEINPUTRESTRICTION}."}, "resetroundtime": {"summary": "Resets the gamemode time to its starting value."}, "removefromarray": {"summary": "Returns a copy of the specified **%{PYRITE_TYPE_ARRAY}** with the provided value removed."}, "randomvalueinarray": {"summary": "Returns a random value from the specified **%{PYRITE_TYPE_ARRAY}**."}, "randomreal": {"summary": "Returns a random **%{PYRITE_TYPE_NUMBER}** between a specified minimum and maximum value (inclusive)."}, "randomizedarray": {"summary": "Returns a copy of the specified **%{PYRITE_TYPE_ARRAY}** with the values in a random order."}, "raisetopower": {"summary": "Returns the 1st provided value raised to the power of the 2nd provided value."}, "primaryweaponsitem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_PRIMARYWEAPONS}** from the collection of all primary weapons."}, "pauseroundtime": {"summary": "Pauses or unpauses the gamemode timer based on the provided **%{PYRITE_TYPE_BOOLEAN}** input."}, "or": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** based on whether either of the two inputs are %{help.common.value-true}."}, "opengadgetsitem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_OPENGADGETS}** from the collection of all open gadgets."}, "number": {"summary": "You can enter any numerical value you want here.  \n1, 2, 3.14, -10.2  \n  \nUse this block in combination with math blocks to do all sorts of fun mathematical equations."}, "notequalto": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if two values are not equal to each other."}, "not": {"summary": "Return a **%{PYRITE_TYPE_BOOLEAN}** of the opposite value of the **%{PYRITE_TYPE_BOOLEAN}** input."}, "normalize": {"summary": "Returns a unit-length normalization of a **%{PYRITE_TYPE_VECTOR}**."}, "multiply": {"summary": "Returns the product of two **%{PYRITE_TYPE_NUMBER}** values or the product of a **%{PYRITE_TYPE_VECTOR}** and **%{PYRITE_TYPE_NUMBER}** value."}, "modulo": {"summary": "Returns the remainder of the 1st provided value divided by the 2nd provided value."}, "message": {"summary": "Returns a constructed **%{PYRITE_TYPE_MESSAGE}** object which can be used with %{ID_ARRIVAL_BLOCK_SHOWEVENTGAMEMODEMESSAGE}, %{ID_ARRIVAL_BLOCK_SHOWNOTIFICATIONMESSAGE}, %{ID_ARRIVAL_BLOCK_SHOWHIGHLIGHTEDGAMEMODEMESSAGE}, and %{ID_ARRIVAL_BLOCK_DISPLAYCUSTOMNOTIFICATIONMESSAGE}. The **%{PYRITE_TYPE_MESSAGE}** object is created by providing a **%{PYRITE_TYPE_NUMBER}**, **%{PYRITE_TYPE_PLAYER}**, or format **%{PYRITE_TYPE_STRING}** (which can take up to 3 format items).  \nA format **%{PYRITE_TYPE_STRING}** is a **%{PYRITE_TYPE_STRING}** that contains `{}` (called braces) within them, which can be substituted for parameters. For example, the **%{PYRITE_TYPE_STRING}** - `{} gained {} points!` - can be given a **%{PYRITE_TYPE_PLAYER}** and **%{PYRITE_TYPE_NUMBER}** parameter and could output as `John gained 2 points!`. See the example below for how this can be used with blocks.  \n  \n_Note: It's your responsibility to ensure a safe and fair experience for others, violating the EA User Agreement by using offensive or inappropriate text may result in account bans._"}, "meleeweaponsitem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_MELEEWEAPONS}** from the collection of all melee weapons."}, "medgadgettypesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_MEDGADGETTYPES}** from the collection of medical gadget types which can be used with the %{ID_ARRIVAL_BLOCK_APPLYMEDGADGET}."}, "max": {"summary": "Returns the greater of the two **%{PYRITE_TYPE_NUMBER}** values provided."}, "mappedarray": {"summary": "Returns a copy of the provided **%{PYRITE_TYPE_ARRAY}** with the values evaluated using the mapped expression provided. The following example utilizes the %{ID_ARRIVAL_BLOCK_ALLPLAYERS} **%{PYRITE_TYPE_ARRAY}** with %{ID_ARRIVAL_BLOCK_GETGAMEMODESCORE} and %{ID_ARRIVAL_BLOCK_CURRENTARRAYELEMENT} to return an **%{PYRITE_TYPE_ARRAY}** of **%{PYRITE_TYPE_PLAYER}** scores."}, "localvectorof": {"summary": "Converts the provided world vector to the corresponding vector in local **%{PYRITE_TYPE_PLAYER}** space."}, "localpositionof": {"summary": "Converts the provided world position to the corresponding position in local **%{PYRITE_TYPE_PLAYER}** space."}, "lessthanequalto": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the 1st provided value is less than or equal to the 2nd provided value."}, "lessthan": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the 1st provided value is less than the 2nd provided value."}, "leftvector": {"summary": "Returns the leftward directional **%{PYRITE_TYPE_VECTOR}** of (-1, 0, 0)."}, "lastof": {"summary": "Returns the value at the end of the specified **%{PYRITE_TYPE_ARRAY}**."}, "kill": {"summary": "Kills a target **%{PYRITE_TYPE_PLAYER}** (skips the Mandown state)."}, "dotproduct": {"summary": "Returns the dot product between two **%{PYRITE_TYPE_VECTOR}** values. If the two values are orthogonal to each other, the result will be zero."}, "divide": {"summary": "Returns the ratio between two **%{PYRITE_TYPE_NUMBER}** values or a **%{PYRITE_TYPE_VECTOR}** and **%{PYRITE_TYPE_NUMBER}** value. A **%{PYRITE_TYPE_VECTOR}** divided by a **%{PYRITE_TYPE_NUMBER}** will yield a scaled **%{PYRITE_TYPE_VECTOR}**."}, "distancebetween": {"summary": "Returns the distance between a starting position and ending position."}, "displaycustommessage": {"summary": "Display a **%{PYRITE_TYPE_MESSAGE}** on-screen in the upper right corner. Using the **%{PYRITE_TYPE_ENUM_CUSTOMMESSAGES}**, this **%{PYRITE_TYPE_MESSAGE}** can be displayed on multiple lines. It will stay up for the length of the provided duration, or stay up indefinitely if a negative **%{PYRITE_TYPE_NUMBER}** is provided. It will be displayed to everyone unless a specific **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}** is provided.  \n  \n_Note: It's your responsibility to ensure a safe and fair experience for others, violating the EA User Agreement by using offensive or inappropriate text may result in account bans._"}, "directiontowards": {"summary": "Returns the direction, or normalized **%{PYRITE_TYPE_VECTOR}**, from a starting position and ending position."}, "directionfromangles": {"summary": "Returns a directional **%{PYRITE_TYPE_VECTOR}** from the provided horizontal (yaw) and vertical (pitch) angles (in degrees)."}, "custommessageitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_CUSTOMMESSAGES}** which can be used with %{ID_ARRIVAL_BLOCK_DISPLAYCUSTOMNOTIFICATIONMESSAGE} and %{ID_ARRIVAL_BLOCK_CLEARCUSTOMNOTIFICATIONMESSAGE} to display information on screen to players."}, "currentarrayelement": {"summary": "Returns a reference to the current **%{PYRITE_TYPE_ARRAY}** element being evaluated. Only used for %{ID_ARRIVAL_BLOCK_FILTEREDARRAY}, %{ID_ARRIVAL_BLOCK_MAPPEDARRAY}, %{ID_ARRIVAL_BLOCK_SORTEDARRAY}, %{ID_ARRIVAL_BLOCK_ISTRUEFORALL}, and %{ID_ARRIVAL_BLOCK_ISTRUEFORANY}."}, "crossproduct": {"summary": "Returns the cross product between two **%{PYRITE_TYPE_VECTOR}** values. If the two **%{PYRITE_TYPE_VECTOR}** inputs are parallel, the result will be zero."}, "createvector": {"summary": "Returns a **%{PYRITE_TYPE_VECTOR}** composed of three provided 'X' (left), 'Y' (up), and 'Z' (forward) values."}, "countof": {"summary": "Returns the **%{PYRITE_TYPE_NUMBER}** of elements in the specified **%{PYRITE_TYPE_ARRAY}**."}, "cosinefromradians": {"summary": "Returns the cosine value of a specified angle in radians."}, "cosinefromdegrees": {"summary": "Returns the cosine value of a specified angle in degrees."}, "controlsif": {"summary": "The start of a conditional control block whose **%{PYRITE_ACTIONS}** will execute if its condition is %{help.common.value-true}."}, "controlselseif": {"summary": "The start of a block of **%{PYRITE_ACTIONS}** that will run if its condition is %{help.common.value-true} and all previous %{ID_ARRIVAL_BLOCK_IF} or %{ID_ARRIVAL_BLOCK_ELSEIF} conditions are %{help.common.value-false}."}, "controlselse": {"summary": "The start of a block of **%{PYRITE_ACTIONS}** that will execute if all previous %{ID_ARRIVAL_BLOCK_IF} and %{ID_ARRIVAL_BLOCK_ELSEIF} conditions are %{help.common.value-false}."}, "appendtoarray": {"summary": "Returns a copy of an **%{PYRITE_TYPE_ARRAY}** with the provided value appended to the end.  \n  \n_Note: It is not possible for an array to contain arrays. Attempting to append an array to an array will concatenate them instead._"}, "angledifference": {"summary": "Returns the difference between two angles (in degrees)."}, "and": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** value based on whether both of the provided inputs return %{help.common.value-true}."}, "allplayers": {"summary": "Returns an **%{PYRITE_TYPE_ARRAY}** of all players within a game."}, "addsoldierweapon": {"summary": "Gives a target **%{PYRITE_TYPE_PLAYER}** a new inventory item."}, "add": {"summary": "Returns the sum of two **%{PYRITE_TYPE_NUMBER}** or two **%{PYRITE_TYPE_VECTOR}** values."}, "absolutevalue": {"summary": "Returns the unsigned value of the provided **%{PYRITE_TYPE_NUMBER}** input."}, "abortif": {"summary": "Stops the execution of a list of **%{PYRITE_ACTIONS}** in a **%{PYRITE_RULE}** if the provided **%{PYRITE_TYPE_BOOLEAN}** is %{help.common.value-true}. Otherwise, the execution continues with the remaining **%{PYRITE_ACTIONS}**."}, "setvariableatindex": {"summary": "Finds or initializes an **%{PYRITE_TYPE_ARRAY}** on a provided **%{PYRITE_TYPE_VARIABLE}**, and stores a provided value in that **%{PYRITE_TYPE_ARRAY}** at the specified index.  \n  \n_Note: The first value in the array starts at an index of 0._"}, "setvariable": {"summary": "Sets the value of a **%{PYRITE_TYPE_VARIABLE}**."}, "setteam": {"summary": "Sets the target **%{PYRITE_TYPE_PLAYER}** team using the provided **%{PYRITE_TYPE_TEAMID}**. This will force the **%{PYRITE_TYPE_PLAYER}** back to the deploy screen.  \n  \n_Note: this block is not supported in Free-For-All._"}, "settargetscore": {"summary": "Sets the gamemode target score used to determine victory."}, "setspawnoverride": {"summary": "Enables or disables the ability for a target **%{PYRITE_TYPE_PLAYER}** to deploy."}, "setroundtimelimit": {"summary": "Sets the duration of the game in seconds."}, "setredeploytime": {"summary": "Overrides the time to redeploy for a target **%{PYRITE_TYPE_PLAYER}**.  \n  \n_Note: The redeploy time must be set to a value between 0 and 60 seconds._"}, "setplayermaxhealth": {"summary": "Sets the max health of a target **%{PYRITE_TYPE_PLAYER}** from 0 to 1000.  \n  \n_Note: The value will be multiplied by the max health multiplier of the that target._"}, "setplayerkit": {"summary": "Sets a target **%{PYRITE_TYPE_PLAYER}** soldier using a provided **%{PYRITE_TYPE_ENUM_SOLDIERKITS}**. The soldier selected should be one that is available from that player team's faction, otherwise, the soldier will not be set. (_ex. if a team's faction is Bad Company 2 US, that player may only select Bad Company 2 US soldiers_)."}, "setplayerdamage": {"summary": "Deals a provided amount of damage to a target **%{PYRITE_TYPE_PLAYER}** by a another **%{PYRITE_TYPE_PLAYER}**."}, "setinventorymagazineammo": {"summary": "Sets the target **%{PYRITE_TYPE_PLAYER}** magazine ammo for the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "setinventoryammo": {"summary": "Sets the target **%{PYRITE_TYPE_PLAYER}** loaded ammo for the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "setheal": {"summary": "Instantly adds a given amount of health to the target **%{PYRITE_TYPE_PLAYER}** applied by a healer **%{PYRITE_TYPE_PLAYER}**.  \n  \n_Note: When healing a player with a max health multiplier not equal to 1, the amount of health they receive will scale with their max health multiplier value._"}, "setgamemodescore": {"summary": "Sets the gamemode score of the provided **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}**."}, "secondaryweaponsitem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_SECONDARYWEAPONS}** from the collection of all secondary weapons."}, "rule": {"onplayerirreversiblydead": "This will trigger when the **%{PYRITE_TYPE_PLAYER}** dies and returns to the deploy screen. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Dead Player)_", "ongamemodestarted": "This will trigger at the start of the gamemode.", "ontimelimitreached": "This will trigger when the gamemode time limit has been reached.", "onrevived": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** is revived by another **%{PYRITE_TYPE_PLAYER}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Revived Player), %{ID_ARRIVAL_BLOCK_EVENTOTHERPLAYER} (Reviver Player)_", "onmandown": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** is forced into the mandown state. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER}  (Downed Player)_", "ongamemodeending": "This will trigger when the gamemode ends.", "onplayerearnedkill": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** earns a kill against another **%{PYRITE_TYPE_PLAYER}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Killer), %{ID_ARRIVAL_BLOCK_EVENTOTHERPLAYER} (Victim), %{ID_ARRIVAL_BLOCK_EVENTDEATHTYPE} (Victim Death Type), %{ID_ARRIVAL_BLOCK_EVENTWEAPON} (Killing Weapon)_", "onplayerleavegame": "This will trigger when any player leaves the game.", "onplayerjoingame": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** joins the game. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Joined Player)_", "onplayerdeployed": "This will trigger whenever a **%{PYRITE_TYPE_PLAYER}** deploys. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Deployed Player)_", "onplayerdied": "This will trigger whenever a **%{PYRITE_TYPE_PLAYER}** dies. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Victim), %{ID_ARRIVAL_BLOCK_EVENTOTHERPLAYER} (Killer), %{ID_ARRIVAL_BLOCK_EVENTDEATHTYPE} (Victim Death Type), %{ID_ARRIVAL_BLOCK_EVENTWEAPON} (Killing Weapon)_", "ongoing": "%{PYRITE_EVENT_ONGOING} **%{PYRITE_EVENT}** types continually check if its **%{PYRITE_CONDITION}** has become %{help.common.value-true}. If so, the **%{PYRITE_ACTIONS}** will be executed once. In order for the **%{PYRITE_EVENT}** to execute again, the **%{PYRITE_CONDITION}** must become %{help.common.value-false} before becoming %{help.common.value-true} again.  \n   \n%{PYRITE_EVENT_ONGOING} **%{PYRITE_EVENT}** types currently exist within the context of:  \n  \n- %{PYRITE_OBJECT_GLOBAL}  \n- %{ID_ARRIVAL_MODBUILDER_OBJECT_PLAYER}  \n- %{ID_ARRIVAL_MODBUILDER_OBJECT_TEAM}  \n- %{ID_ARRIVAL_MODBUILDER_OBJECT_VEHICLE}  \n- %{ID_ARRIVAL_MODBUILDER_OBJECT_CAPTUREPOINT}  \n  \nWithin the %{ID_ARRIVAL_MODBUILDER_OBJECT_PLAYER} and %{ID_ARRIVAL_MODBUILDER_OBJECT_TEAM} contexts, payload value blocks, such as %{ID_ARRIVAL_BLOCK_EVENTPLAYER} and %{ID_ARRIVAL_BLOCK_EVENTTEAM}, can be used to refer to the specific %{ID_ARRIVAL_MODBUILDER_OBJECT_PLAYER} or %{ID_ARRIVAL_MODBUILDER_OBJECT_TEAM} within the **%{PYRITE_EVENT}**. _Note: In FFA, %{PYRITE_EVENT_ONGOING} %{ID_ARRIVAL_MODBUILDER_OBJECT_TEAM} will not execute at all._", "typesofrule": "Types of **%{PYRITE_RULE}** Blocks Events", "summary": "**%{PYRITE_RULE}** blocks are triggered from an in-game **%{PYRITE_EVENT}**. When an **%{PYRITE_EVENT}** triggers, this block will check if its **%{PYRITE_CONDITION}** has been met and then execute all of the **%{PYRITE_ACTIONS}**.  \n  \n_In the following example, the **%{PYRITE_CONDITION}** is checking when a Player earns a kill, whether their team has reached the target score, Then, the **%{PYRITE_ACTIONS}** execute, which in this case, is ending the gamemode for the **%{PYRITE_TYPE_PLAYER}** team's favor._", "onplayerentervehicle": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** enters a **%{PYRITE_TYPE_VEHICLE}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Player Who Enters), %{ID_ARRIVAL_BLOCK_EVENTVEHICLE} (Vehicle)_", "onplayerexitvehicle": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** exits a **%{PYRITE_TYPE_VEHICLE}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Player Who Exits), %{ID_ARRIVAL_BLOCK_EVENTVEHICLE} (Vehicle)_", "onvehicledestroyed": "This will trigger when a **%{PYRITE_TYPE_VEHICLE}** is destroyed. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTVEHICLE} (Destroyed Vehicle)_", "onvehiclespawned": "This will trigger when a **%{PYRITE_TYPE_VEHICLE}** is called into the map. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTVEHICLE} (Spawned Vehicle)_", "onplayerentervehicleseat": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** enters a **%{PYRITE_TYPE_VEHICLE}** seat. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Player Who Enters Seat), %{ID_ARRIVAL_BLOCK_EVENTVEHICLE} (Vehicle), %{ID_ARRIVAL_BLOCK_EVENTSEAT} (Seat Index)_", "onplayerexitvehicleseat": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** exits a **%{PYRITE_TYPE_VEHICLE}** seat. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Player Who Exits Seat), %{ID_ARRIVAL_BLOCK_EVENTVEHICLE} (Vehicle), %{ID_ARRIVAL_BLOCK_EVENTSEAT} (Seat Index)_", "oncapturepointlost": "This will trigger when a team loses control of a **%{PYRITE_TYPE_CAPTUREPOINT}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTCAPTUREPOINT} (Lost Capture Point)_", "oncapturepointcapturing": "This will trigger when a team begins capturing a **%{PYRITE_TYPE_CAPTUREPOINT}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTCAPTUREPOINT} (Capture Point Being Captured)_", "oncapturepointcaptured": "This will trigger when a team takes control of a **%{PYRITE_TYPE_CAPTUREPOINT}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTCAPTUREPOINT} (Captured Capture Point)_", "oncapturepointneutralizing": "This will trigger when a team begins neutralizing a **%{PYRITE_TYPE_CAPTUREPOINT}**. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTCAPTUREPOINT} (Capture Point Being Neutralized)_", "onplayerexitcapturepoint": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** exits a **%{PYRITE_TYPE_CAPTUREPOINT}** capturing area. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Player Exiting Capture Area), %{ID_ARRIVAL_BLOCK_EVENTCAPTUREPOINT} (Capture Point Being Exited)_", "onplayerentercapturepoint": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** enters a **%{PYRITE_TYPE_CAPTUREPOINT}** capturing area. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Player Entering Capture Area), %{ID_ARRIVAL_BLOCK_EVENTCAPTUREPOINT} (Capture Point Being Entered)_", "onplayerearnkillassist": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** earns a kill assist. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Assist Player), %{ID_ARRIVAL_BLOCK_EVENTOTHERPLAYER} (Victim)", "onplayerdamaged": "This will trigger when a **%{PYRITE_TYPE_PLAYER}** takes damage. _Payloads: %{ID_ARRIVAL_BLOCK_EVENTPLAYER} (Damaged Player), %{ID_ARRIVAL_BLOCK_EVENTOTHERPLAYER} (Damager Player), %{ID_ARRIVAL_BLOCK_EVENTDAMAGETYPE} (Damage Type), %{ID_ARRIVAL_BLOCK_EVENTWEAPON} (Damager Weapon)_", "onmcomdestroyed": "This will trigger when a **%{PYRITE_TYPE_MCOM}** is destroyed. _Payloads: **%{ID_ARRIVAL_BLOCK_EVENTMCOM}** (Destroyed MCOM)_", "onmcomdefused": "This will trigger when a **%{PYRITE_TYPE_MCOM}** is defused. _Payloads: **%{ID_ARRIVAL_BLOCK_EVENTMCOM}** (Defused MCOM), **%{ID_ARRIVAL_BLOCK_EVENTPLAYER}** (Player Who Defused)_", "onmcomarmed": "This will trigger when a **%{PYRITE_TYPE_MCOM}** is armed. _Payloads: **%{ID_ARRIVAL_BLOCK_EVENTMCOM}** (Armed MCOM), **%{ID_ARRIVAL_BLOCK_EVENTPLAYER}** (Player Who Armed)_"}, "roundtointeger": {"summary": "Returns a whole **%{PYRITE_TYPE_NUMBER}** rounded from the input value. The value rounds up if the decimal of the **%{PYRITE_TYPE_NUMBER}** is greater than or equal to 0.5, and rounds down if it is less than 0.5."}, "rightvector": {"summary": "Returns the rightward directional **%{PYRITE_TYPE_VECTOR}** of (1, 0, 0)."}, "filteredarray": {"summary": "Returns a filtered version of the specified **%{PYRITE_TYPE_ARRAY}** based on the condition provided. This block cycles through the entire array. You can utilize the %{ID_ARRIVAL_BLOCK_CURRENTARRAYELEMENT} block to represent the element in the **%{PYRITE_TYPE_ARRAY}** for each iteration. For an **%{PYRITE_TYPE_ARRAY}** like %{ID_ARRIVAL_BLOCK_ALLPLAYERS}, %{ID_ARRIVAL_BLOCK_CURRENTARRAYELEMENT} would represent each **%{PYRITE_TYPE_PLAYER}** in that **%{PYRITE_TYPE_ARRAY}**. You can then build your filter condition based on a property of that **%{PYRITE_TYPE_PLAYER}** (like score, or some custom player **%{PYRITE_TYPE_VARIABLE}** value)."}, "farthestplayerfrom": {"summary": "Returns the farthest alive **%{PYRITE_TYPE_PLAYER}** from a provided position. Can be filtered using a **%{PYRITE_TYPE_TEAMID}**.  \n  \n_Note: If no players are alive when this block is called, the returned **%{PYRITE_TYPE_PLAYER}** will be invalid._"}, "factionsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_FACTIONS}** from the collection of all available factions."}, "eventteam": {"summary": "Returns the **%{PYRITE_TYPE_TEAMID}** payload from the %{PYRITE_EVENT_ONGOING} Team **%{PYRITE_EVENT}** context."}, "eventplayer": {"summary": "Returns the 1st **%{PYRITE_TYPE_PLAYER}** payload from the **%{PYRITE_RULE}** **%{PYRITE_EVENT}** context."}, "eventotherplayer": {"summary": "Returns the 2nd **%{PYRITE_TYPE_PLAYER}** payload from the **%{PYRITE_RULE}** **%{PYRITE_EVENT}** context."}, "equals": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if two values are equal to each other."}, "endround": {"summary": "Ends the current gamemode and designates the provided **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}** as the winner. The gamemode ends in draw if TeamId is set to 0."}, "enableplayerspawning": {"summary": "Enables or disables spawning from the deploy screen for all players."}, "enableinputrestriction": {"summary": "Enables or disables a specified **%{PYRITE_TYPE_ENUM_RESTRICTEDINPUTS}** on a target **%{PYRITE_TYPE_PLAYER}**."}, "enabledefaultwincondition": {"summary": "Enables or disables the gamemode's default win condition logic. The win condition is checked when the time limit is reached or when a team or player reaches the target score. Disable this if you want to trigger your own win condition."}, "enabledefaultscoring": {"summary": "Enables or disables default gamemode scoring logic, which refers to the base gamemode's scoring rules. For instance, disabling this rule will remove ticket bleed from Conquest or add one point for kills in Free-for-All. Disable this if you want to implement your own custom scoring logic."}, "enableallinputrestrictions": {"summary": "Enables or disables all keyboard and mouse inputs - such as movement, firing, and turning - for a target **%{PYRITE_TYPE_PLAYER}**."}, "emptyarray": {"summary": "Returns an initialized empty **%{PYRITE_TYPE_ARRAY}**."}, "downvector": {"summary": "Returns the downward directional **%{PYRITE_TYPE_VECTOR}** of (0, -1, 0)."}, "continue": {"summary": "Forces the execution of a looping block (such as %{ID_ARRIVAL_BLOCK_WHILE} or %{ID_ARRIVAL_BLOCK_FORVARIABLE}) to the start of the next iteration of that block."}, "condition": {"summary": "Evaluates the condition to run a **%{PYRITE_RULE}** or **%{PYRITE_SUBROUTINE}** block based on the **%{PYRITE_TYPE_BOOLEAN}** input."}, "closestplayerto": {"summary": "Returns the closest alive **%{PYRITE_TYPE_PLAYER}** to a provided position. Can be filtered using a **%{PYRITE_TYPE_TEAMID}**.  \n  \n_Note: If no players are alive when this block is called, the returned **%{PYRITE_TYPE_PLAYER}** will be invalid._"}, "clearcustommessage": {"summary": "Clears text from the provided **%{PYRITE_TYPE_ENUM_CUSTOMMESSAGES}** for the provided **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}**. If no **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}** is given, it clears all players text at that **%{PYRITE_TYPE_ENUM_CUSTOMMESSAGES}**."}, "clearallcustommessages": {"summary": "Clears all custom messages for a provided **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}**. If no **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}** is provided, it will clear all custom messages for everyone."}, "chasevariableovertime": {"summary": "Gradually modifies the value of a **%{PYRITE_TYPE_VARIABLE}** over time (in seconds). The variable's value will reach the limit at the end of the interval.   \n  \n_Note: If the limit is changed later, the **%{PYRITE_TYPE_VARIABLE}** will continue to be updated from its previous value. To spot modifying the **%{PYRITE_TYPE_VARIABLE}**, use %{ID_ARRIVAL_BLOCK_STOPCHASINGVARIABLE}._"}, "chasevariableatrate": {"summary": "Gradually modifies the value of a **%{PYRITE_TYPE_VARIABLE}** at a specified rate (value/second) until it reaches the provided limit.   \n  \n_Note: If the limit is changed later, the **%{PYRITE_TYPE_VARIABLE}** will continue to be updated from its previous value. To spot modifying the **%{PYRITE_TYPE_VARIABLE}**, use %{ID_ARRIVAL_BLOCK_STOPCHASINGVARIABLE}._"}, "charactergadgetsitem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_CHARACTERGADGETS}** from the collection of all character specialties."}, "break": {"summary": "Breaks and exits the execution of a looping block, such as %{ID_ARRIVAL_BLOCK_WHILE} or %{ID_ARRIVAL_BLOCK_FORVARIABLE}."}, "boolean": {"summary": "A **%{PYRITE_TYPE_BOOLEAN}** is fancy game developer talk for a %{help.common.value-true} or %{help.common.value-false} value. This type is used to define or identify the state of a variety of things.  \n  \nIs a player currently prone?  \n  \nIs the player using a specific soldier?  \n  \nCan players not score points because of some custom condition?"}, "backwardvector": {"summary": "Returns the backward directional **%{PYRITE_TYPE_VECTOR}** of (0, 0, 1)."}, "arrayslice": {"summary": "Returns a copy of the specified **%{PYRITE_TYPE_ARRAY}** containing only values from a specified index range."}, "arraycontains": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** value based on whether the provided **%{PYRITE_TYPE_ARRAY}** contains the provided value."}, "applymedgadget": {"summary": "Applies the effect of a medical gadget to a target **%{PYRITE_TYPE_PLAYER}**."}, "zcomponentof": {"summary": "Returns the 'Z' component of a provided **%{PYRITE_TYPE_VECTOR}**."}, "ycomponentof": {"summary": "Returns the 'Y' component of a provided **%{PYRITE_TYPE_VECTOR}**."}, "xcomponentof": {"summary": "Returns the 'X' component of a provided **%{PYRITE_TYPE_VECTOR}**."}, "worldvectorof": {"summary": "Converts the provided local **%{PYRITE_TYPE_PLAYER}** vector to the corresponding vector in the world space."}, "worldpositionof": {"summary": "Converts the provided local **%{PYRITE_TYPE_PLAYER}** position to the corresponding position in the world space."}, "isusingkit": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the target **%{PYRITE_TYPE_PLAYER}** is a specified **%{PYRITE_TYPE_ENUM_SOLDIERKITS}**."}, "istrueforany": {"summary": "Returns %{help.common.value-true} if the provided condition is %{help.common.value-true} for at least one element in the provided **%{PYRITE_TYPE_ARRAY}**."}, "istrueforall": {"summary": "Returns %{help.common.value-true} if the provided condition is %{help.common.value-true} for every element in the provided **%{PYRITE_TYPE_ARRAY}**."}, "isfaction": {"summary": "Returns %{help.common.value-true} if the provided **%{PYRITE_TYPE_TEAMID}** is using soldiers from the specified **%{PYRITE_TYPE_ENUM_FACTIONS}**."}, "inventoryslotsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}** from the collection of all available player inventory slots."}, "inputtriggeritem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_INPUTTRIGGER}** from the collection of all player inputs which can be triggered with %{ID_ARRIVAL_BLOCK_FORCEPLAYERINPUT}."}, "indexofarrayvalue": {"summary": "Returns the index of an **%{PYRITE_TYPE_ARRAY}** value."}, "ifthenelse": {"summary": "Returns the 1st provided value if the condition is %{help.common.value-true}, otherwise, returns the 2nd provided value."}, "if": {"summary": "A special block which evaluates conditions to control the flow of **%{PYRITE_ACTIONS}** in the If, Else If, and Else branches."}, "hasinventory": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the provided **%{PYRITE_TYPE_PLAYER}** has the specified ability."}, "greaterthanequalto": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the 1st provided value is greater than the 2nd provided value."}, "greaterthan": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the 1st provided value is greater than the 2nd provided value."}, "getvariable": {"summary": "Returns the value of a **%{PYRITE_TYPE_VARIABLE}**."}, "getteamid": {"summary": "Returns the **%{PYRITE_TYPE_TEAMID}** value of the specified **%{PYRITE_TYPE_PLAYER}** OR the corresponding **%{PYRITE_TYPE_TEAMID}** of the provided **%{PYRITE_TYPE_NUMBER}**."}, "gettargetscore": {"summary": "Returns the gamemode target score needed for victory."}, "while": {"summary": "A block of **%{PYRITE_ACTIONS}** that will execute in a loop as long as the provided condition is %{help.common.value-true}.  \n  \n_Note: You must utilize a %{ID_ARRIVAL_BLOCK_WAIT} block at the beginning or the end of the iteration._"}, "waituntil": {"summary": "Pauses the execution of **%{PYRITE_ACTIONS}** in a **%{PYRITE_RULE}** for a provided **%{PYRITE_TYPE_NUMBER}** of seconds or if the provided condition evaluates to %{help.common.value-true} during that interval."}, "wait": {"summary": "Pauses the execution of **%{PYRITE_ACTIONS}** in a **%{PYRITE_RULE}** for a provided **%{PYRITE_TYPE_NUMBER}** of seconds."}, "vectortowards": {"summary": "Returns the displacement **%{PYRITE_TYPE_VECTOR}** from a starting position to an ending position."}, "variablereference": {"summary": "This block is used to reference a **%{PYRITE_TYPE_VARIABLE}** instance. The **%{PYRITE_TYPE_VARIABLE}** can be selected by setting the scope -  %{PYRITE_OBJECT_GLOBAL} , Player, or Team - in the first dropdown, and then selecting the **%{PYRITE_TYPE_VARIABLE}** name in the second dropdown.  \n  \n**%{PYRITE_TYPE_VARIABLE}** instances can be created or deleted by clicking on the _Variables_ tab, and clicking on _Manage Variables_."}, "valueinarray": {"summary": "Returns the value found at a provided index of an **%{PYRITE_TYPE_ARRAY}**."}, "upvector": {"summary": "Returns the upward directional **%{PYRITE_TYPE_VECTOR}** of (0, 1, 0)."}, "unspottarget": {"summary": "Unspots a target **%{PYRITE_TYPE_PLAYER}** for all players."}, "unspawnplayer": {"summary": "Undeploys a target **%{PYRITE_TYPE_PLAYER}** that is alive on the battlefield back to the deploy screen."}, "unspawnallplayers": {"summary": "Undeploys all players that are alive on the battlefield back to the deploy screen."}, "throwablesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_THROWABLES}** from the collection of all throwables."}, "text": {"summary": "You can use this block to utilize text within your mod.  \n  \n> Team 2s Flag has been Captured!  \n>  \n> A player has become the Juggernaut. Beware!  \n>  \n> Phase 3 of your really cool custom mod has started!  \n  \n_Note: It's your responsibility to ensure a safe and fair experience for others, violating the EA User Agreement by using offensive or inappropriate text may result in account bans._"}, "teleport": {"summary": "Teleports a target to a provided valid position facing a specified angle (in radians)."}, "subtract": {"summary": "Returns the difference between two **%{PYRITE_TYPE_NUMBER}** values or two **%{PYRITE_TYPE_VECTOR}** values."}, "subroutineinstance": {"summary": "Calls a **%{PYRITE_SUBROUTINE}** block of the same name."}, "subroutine": {"summary": "**%{PYRITE_SUBROUTINE}** blocks are special blocks that are similar to **%{PYRITE_RULE}** blocks, but do not have a designated **%{PYRITE_EVENT}**. A **%{PYRITE_SUBROUTINE}** block's **%{PYRITE_ACTIONS}** will be executed when called from the **%{PYRITE_RULE}** block. Like **%{PYRITE_RULE}** blocks, **%{PYRITE_SUBROUTINE}** blocks can have a **%{PYRITE_CONDITION}** to determine whether or not the **%{PYRITE_ACTIONS}** inside should execute.\n  \n  An important note is payload values, including %{ID_ARRIVAL_BLOCK_EVENTPLAYER}, %{ID_ARRIVAL_BLOCK_EVENTOTHERPLAYER}, and %{ID_ARRIVAL_BLOCK_EVENTTEAM}, use the context of the **%{PYRITE_RULE}** block in which the **%{PYRITE_SUBROUTINE}** instance block is placed in. An example of this would be, if your **%{PYRITE_RULE}** block has an instance of %{ID_ARRIVAL_BLOCK_EVENTPLAYER}, and the **%{PYRITE_SUBROUTINE}** is called in %{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYERDEPLOYED}, it would use the %{ID_ARRIVAL_BLOCK_EVENTPLAYER} associated with %{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYERDEPLOYED}. Be careful with this, as you will run into errors if your **%{PYRITE_SUBROUTINE}** is placed inside a **%{PYRITE_RULE}** block with non-existant payloads for that **%{PYRITE_EVENT}**."}, "stopchasingvariable": {"summary": "Stops an in-progress tracking of a **%{PYRITE_TYPE_VARIABLE}** from the %{ID_ARRIVAL_BLOCK_CHASEVARIABLEOVERTIME} or %{ID_ARRIVAL_BLOCK_CHASEVARIABLEATRATE} blocks, leaving it at its current value."}, "squareroot": {"summary": "Returns the square root of a provided **%{PYRITE_TYPE_NUMBER}** value."}, "spottarget": {"summary": "Spots a target **%{PYRITE_TYPE_PLAYER}** for all players for a specified duration of time (in seconds)."}, "sortedarray": {"summary": "Returns a sorted version of the specified **%{PYRITE_TYPE_ARRAY}** given a **%{PYRITE_TYPE_NUMBER}** value to sort by (ascending). %{ID_ARRIVAL_BLOCK_CURRENTARRAYELEMENT} can be utilized to represent each value in the **%{PYRITE_TYPE_ARRAY}**. In the following example, %{ID_ARRIVAL_BLOCK_CURRENTARRAYELEMENT} is used to represent each **%{PYRITE_TYPE_PLAYER}** in %{ID_ARRIVAL_BLOCK_ALLPLAYERS}. %{ID_ARRIVAL_BLOCK_GETGAMEMODESCORE} is used with %{ID_ARRIVAL_BLOCK_CURRENTARRAYELEMENT} to return the score, used as a rank, to sort the **%{PYRITE_TYPE_ARRAY}** in ascending order."}, "soldierstatevectoritem": {"summary": "Returns the **%{PYRITE_TYPE_ENUM_SOLDIERSTATEVECTOR}** of the selected **%{PYRITE_TYPE_VECTOR}**-based player property."}, "soldierstatenumberitem": {"summary": "Returns the **%{PYRITE_TYPE_ENUM_SOLDIERSTATENUMBER}** of the selected **%{PYRITE_TYPE_NUMBER}**-based player property."}, "soldierstateboolitem": {"summary": "Returns the **%{PYRITE_TYPE_ENUM_SOLDIERSTATEBOOL}** of the selected **%{PYRITE_TYPE_BOOLEAN}**-based player property."}, "soldierkitsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_SOLDIERKITS}** from a list of all soldiers."}, "skipmandown": {"summary": "Sets the target **%{PYRITE_TYPE_PLAYER}** to skip the mandown state and go directly to the deploy screen when killed.  \n  \n_Note: By default, %{ID_ARRIVAL_BLOCK_SKIPMANDOWN} is disabled._"}, "skipif": {"summary": "Skips a provided number of **%{PYRITE_ACTIONS}** following this block within this **%{PYRITE_RULE}** if the condition evaluates to %{help.common.value-true}. If it does not, execution continues with the remaining **%{PYRITE_ACTIONS}**."}, "skip": {"summary": "Skips a provided number of **%{PYRITE_ACTIONS}** following this block within this **%{PYRITE_RULE}**."}, "sinefromradians": {"summary": "Returns the sine value of a specified angle in radians."}, "sinefromdegrees": {"summary": "Returns the sine value of a specified angle in degrees."}, "shownotificationmessage": {"summary": "Displays a notification-type **%{PYRITE_TYPE_MESSAGE}** on the top-right of the screen for 6 seconds. If no target is provided, it will display the **%{PYRITE_TYPE_MESSAGE}** to everyone.  \n  \n_Note: It's your responsibility to ensure a safe and fair experience for others, violating the EA User Agreement by using offensive or inappropriate text may result in account bans._"}, "showhighlightedmessage": {"summary": "Displays a **%{PYRITE_TYPE_MESSAGE}** on the world log above the minimap for 6 seconds. If no target is provided, it will display the **%{PYRITE_TYPE_MESSAGE}** to everyone.  \n  \n_Note: This will only appear to players that are deployed on the map. It's your responsibility to ensure a safe and fair experience for others, violating the EA User Agreement by using offensive or inappropriate text may result in account bans._"}, "showgamemodemessage": {"summary": "Displays a **%{PYRITE_TYPE_MESSAGE}** on the top center of the screen for 6 seconds. If no target is provided, the **%{PYRITE_TYPE_MESSAGE}** will display to everyone.  \n  \n_Note: This will only appear to players that are deployed on the map. It's your responsibility to ensure a safe and fair experience for others, violating the EA User Agreement by using offensive or inappropriate text may result in account bans._"}, "getsoldierstate": {"summary": "Returns the value of the target **%{PYRITE_TYPE_PLAYER}** state."}, "getroundtime": {"summary": "Returns the time limit set for the gamemode (in seconds)."}, "getplayerkills": {"summary": "Returns the total amount of kills for the target **%{PYRITE_TYPE_PLAYER}**."}, "getplayerdeaths": {"summary": "Returns the total amount of deaths for the target **%{PYRITE_TYPE_PLAYER}**."}, "getmatchtimeelapsed": {"summary": "Returns the amount of time left (seconds) in the current gamemode."}, "getinventorymagazineammo": {"summary": "Returns the target **%{PYRITE_TYPE_PLAYER}** magazine ammo of the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "getinventoryammo": {"summary": "Returns the target **%{PYRITE_TYPE_PLAYER}** loaded ammo of the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "getgamemodescore": {"summary": "Returns the current gamemode score of the provided **%{PYRITE_TYPE_PLAYER}** or **%{PYRITE_TYPE_TEAMID}**."}, "forwardvector": {"summary": "Returns the forward directional **%{PYRITE_TYPE_VECTOR}** of (0, 0, -1)."}, "forvariable": {"summary": "The start of a series of **%{PYRITE_ACTIONS}** that will execute in a loop, modifying the control variable on each iteration. If the control %{PYRITE_TYPE_VARIABLE} reaches or passes the range end value, the loop exits, and execution continues through the remaining **%{PYRITE_ACTIONS}** in the **%{PYRITE_RULE}**."}, "forceswitchinventory": {"summary": "Forces the target **%{PYRITE_TYPE_PLAYER}** to switch to the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "forcespawnallplayers": {"summary": "Force spawns all players in the deploy screen."}, "forcerevive": {"summary": "Revives a target **%{PYRITE_TYPE_PLAYER}** that is in the mandown state."}, "forceplayerinput": {"summary": "Forces a target **%{PYRITE_TYPE_PLAYER}** to do the specified **%{PYRITE_TYPE_ENUM_INPUTTRIGGER}**.  \n  \n_Note: This will NOT work if the input has been restricted by the %{ID_ARRIVAL_BLOCK_ENABLEINPUTRESTRICTION} entity._"}, "forcemandown": {"summary": "Puts the target **%{PYRITE_TYPE_PLAYER}** into the mandown state (unless mandown is disabled)."}, "firstof": {"summary": "Returns the first value of the specified **%{PYRITE_TYPE_ARRAY}**."}, "common": {"contexts": {"target": "(Target)", "max": "(Maximum)", "min": "(Minimum)", "exponent": "(Exponent)", "base": "(Base)", "mapexpr": "(Mapped Expression)", "localvec": "(Local Vector)", "worldvec": "(World Vector)", "localpos": "(Local Position)", "worldpos": "(World Position)", "outputfalse": "(Output Value if the Condition is %{help.common.value-false})", "outputtrue": "(Output Value if the Condition is %{help.common.value-true})", "end": "(End)", "z": "(Z Value)", "y": "(Y Value)", "x": "(X Value)", "group": "(Group)", "yaw": "(Yaw Rotation)", "endpos": "(Ending Position)", "startpos": "(Starting Position)", "position": "(Position)", "duration": "(Duration)", "rank": "(Rank)", "giver": "(Giver)", "healer": "(Healer)", "rate": "(Rate)", "limit": "(Limit)", "count": "(Count)", "value": "(Value)", "index": "(Index)", "startindex": "(Start Index)", "secondangle": "(2nd Angle)", "firstangle": "(1st Angle)", "interval": "(Interval)", "start": "(Start)", "spotter": "(Spotter)", "vertical": "(Vertical)", "horizontal": "(Horizontal)"}, "optional": "_Optional_", "output": "Output", "input": "Inputs", "value-false": "_False_", "value-true": "_True_"}, "enablevomessaging": {"summary": "Enables or disables the gamemode voice-over (VO) text and audio messaging, such as announcements about sector majority and capture points.  \n  \n_Note: This function is enabled by default._"}, "isinventoryslotactive": {"summary": "Returns %{help.common.value-true} whether or not the active inventory slot of the target **%{PYRITE_TYPE_PLAYER}** is the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "playerdeathtypesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_PLAYERDEATHTYPES}** from the collection of all possible death types."}, "eventweaponcompare": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the given **%{PYRITE_TYPE_HARDWAREID}** is equivalent to the provided ability."}, "eventweapon": {"summary": "Returns the **%{PYRITE_TYPE_HARDWAREID}** of the weapon used to kill the victim from the **%{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYERDIED}** or **%{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYEREARNEDKILL}** **%{PYRITE_EVENT}** context."}, "eventdeathtypecompare": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the victim died by the provided **%{PYRITE_TYPE_DEATHTYPE}**."}, "eventdeathtype": {"summary": "Returns the **%{PYRITE_TYPE_DEATHTYPE}** of the victim from the **%{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYERDIED}** or **%{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYEREARNEDKILL}** **%{PYRITE_EVENT}** context."}, "arctangentinradians": {"summary": "Returns the inverse tangent of a provided **%{PYRITE_TYPE_NUMBER}** value in radians."}, "arctangentindegrees": {"summary": "Returns the inverse tangent of a provided **%{PYRITE_TYPE_NUMBER}** value in degrees."}, "arcsineinradians": {"summary": "Returns the inverse sine of a provided **%{PYRITE_TYPE_NUMBER}** value in radians."}, "arcsineindegrees": {"summary": "Returns the inverse sine of a provided **%{PYRITE_TYPE_NUMBER}** value in degrees."}, "arccosineinradians": {"summary": "Returns the inverse cosine of a provided **%{PYRITE_TYPE_NUMBER}** value in radians."}, "arccosineindegrees": {"summary": "Returns the inverse cosine of a provided **%{PYRITE_TYPE_NUMBER}** value in degrees."}, "anglebetweenvectors": {"summary": "Returns the angle (in degrees) between two provided **%{PYRITE_TYPE_VECTOR}** values."}, "tangentfromradians": {"summary": "Returns the tangent value of a specified angle in radians."}, "tangentfromdegrees": {"summary": "Returns the tangent value of a specified angle in degrees."}, "isplayervalid": {"summary": "Returns %{help.common.value-true} if the provided **%{PYRITE_TYPE_PLAYER}** is valid."}, "xor": {"summary": "Returns %{help.common.value-true} if the provided **%{PYRITE_TYPE_BOOLEAN}** inputs return different values."}, "iscurrentmap": {"summary": "Returns %{help.common.value-true} if the provided **%{PYRITE_TYPE_ENUM_MAPS}** is the name of the current map."}, "getgamemodetimeelapsed": {"summary": "Returns the total elapsed time of the current gamemode."}, "mapsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_MAPS}** from the collection of all maps."}, "isvehicleseatoccupied": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the target seat index **%{PYRITE_TYPE_NUMBER}** of target **%{PYRITE_TYPE_VEHICLE}** is a occupied by a player."}, "isvehicleoccupied": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the target **%{PYRITE_TYPE_VEHICLE}** is a occupied by a player."}, "getplayervehicleseat": {"summary": "Returns the seat index **%{PYRITE_TYPE_NUMBER}** for the target **%{PYRITE_TYPE_PLAYER}** if they are in a vehicle, otherwise returns -1."}, "getplayerfromvehicleseat": {"summary": "Returns the **%{PYRITE_TYPE_PLAYER}** currently occupying the provided seat index **%{PYRITE_TYPE_NUMBER}** of the provided **%{PYRITE_TYPE_VEHICLE}**.  \n  \n_Note: If no players are in the vehicle seat when this block is called, the returned **%{PYRITE_TYPE_PLAYER}** will be invalid._"}, "getvehicleseatcount": {"summary": "Returns the **%{PYRITE_TYPE_NUMBER}** of seats in a **%{PYRITE_TYPE_VEHICLE}**."}, "getvehicleteamid": {"summary": "Returns the **%{PYRITE_TYPE_TEAMID}** of the provided **%{PYRITE_TYPE_VEHICLE}**.  \n  \n_Note: A **%{PYRITE_TYPE_VEHICLE}** that is not occupied will have a neutral **%{PYRITE_TYPE_TEAMID}**._"}, "getvehiclefromplayer": {"summary": "Returns the **%{PYRITE_TYPE_VEHICLE}** used by a **%{PYRITE_TYPE_PLAYER}**."}, "allvehicles": {"summary": "Returns an **%{PYRITE_TYPE_ARRAY}** of all vehicles within a game."}, "vehiclesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_VEHICLES}** from the %{PYRITE_TYPE_VEHICLE} collection."}, "spottargetforplayer": {"summary": "Spots a target **%{PYRITE_TYPE_PLAYER}** only for a specified **%{PYRITE_TYPE_PLAYER}** for a provided duration of time (in seconds)."}, "spawnplayer": {"summary": "Deploys a target **%{PYRITE_TYPE_PLAYER}** onto the battlefield from the deploy screen."}, "forceplayertoseat": {"summary": "Forces the specified **%{PYRITE_TYPE_PLAYER}** into the target **%{PYRITE_TYPE_VEHICLE}** at the provided seat **%{PYRITE_TYPE_NUMBER}**.  \n  \n_Note: If the provided index is -1, that **%{PYRITE_TYPE_PLAYER}** will be forced into the first available seat._"}, "forceplayerexitvehicle": {"summary": "Forces the specified **%{PYRITE_TYPE_PLAYER}** to exit the target **%{PYRITE_TYPE_VEHICLE}**."}, "forceallexitvehicle": {"summary": "Forces all players to exit the target **%{PYRITE_TYPE_VEHICLE}**."}, "destroyvehicle": {"summary": "Destroys the target **%{PYRITE_TYPE_VEHICLE}**."}, "comparevehiclename": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the target **%{PYRITE_TYPE_VEHICLE}** has the same name as the provided **%{PYRITE_TYPE_ENUM_VEHICLES}** or if it is the same type as the provided **%{PYRITE_TYPE_ENUM_VEHICLETYPES}**."}, "eventvehicle": {"summary": "Returns the **%{PYRITE_TYPE_VEHICLE}** payload from the **%{PYRITE_RULE}** **%{PYRITE_EVENT}** context."}, "vehicletypesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_VEHICLETYPES}** from the collection of all %{PYRITE_TYPE_VEHICLE} types."}, "getvehiclestate": {"summary": "Returns the value of the target **%{PYRITE_TYPE_VEHICLE}** state."}, "vehiclestatevectoritem": {"summary": "Returns the **%{PYRITE_TYPE_ENUM_VEHICLESTATEVECTOR}** of the selected **%{PYRITE_TYPE_VECTOR}**-based vehicle property."}, "eventseat": {"summary": "Returns the **%{PYRITE_TYPE_NUMBER}** seat index payload of a **%{PYRITE_TYPE_VEHICLE}** from the **%{PYRITE_RULE}** **%{PYRITE_EVENT}** context."}, "getallplayersinvehicle": {"summary": "Returns a **%{PYRITE_TYPE_ARRAY}** of all players inside a provided **%{PYRITE_TYPE_VEHICLE}**"}, "eventcapturepoint": {"summary": "Returns the **%{PYRITE_TYPE_CAPTUREPOINT}** payload from the **%{PYRITE_RULE}** **%{PYRITE_EVENT}** context."}, "enableobjective": {"summary": "Enables or disables the provided **%{PYRITE_TYPE_CAPTUREPOINT}** or **%{PYRITE_TYPE_MCOM}**.  \n  \n_Note: MCOMs are only available on TDM, VTDM, and Custom Conquest layouts._"}, "enablecapturepointspawning": {"summary": "Enables or disables deploying on provided **%{PYRITE_TYPE_CAPTUREPOINT}** for the team that owns it."}, "comparecapturepoint": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the target **%{PYRITE_TYPE_CAPTUREPOINT}** has the same designation as the provided **%{PYRITE_TYPE_ENUM_CAPTUREPOINTS}**."}, "getcapturepoint": {"summary": "Returns the **%{PYRITE_TYPE_CAPTUREPOINT}** or **%{PYRITE_TYPE_MCOM}** corresponding to the provided **%{PYRITE_TYPE_ENUM_CAPTUREPOINTS}** or **%{PYRITE_TYPE_ENUM_MCOMS}** respectively."}, "capturepointsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_CAPTUREPOINTS}** from the collection of all possible capture points."}, "allcapturepoints": {"summary": "Returns an **%{PYRITE_TYPE_ARRAY}** of all capture points within a game."}, "setvehiclemaxhealthmultiplier": {"summary": "Multiplies the maximum health of target **%{PYRITE_TYPE_VEHICLE}** by the provided **%{PYRITE_TYPE_NUMBER}** greater than 0 and less than or equal to 4.  \n  \n_Note: The health of a %{PYRITE_TYPE_VEHICLE} is displayed in-game as a percentage._"}, "senderrorreport": {"summary": "Displays a provided **%{PYRITE_TYPE_MESSAGE}** as an error in the Admin menu."}, "setmaxcapturemultiplier": {"summary": "Sets the capture time multiplier for target **%{PYRITE_TYPE_CAPTUREPOINT}** to the provided **%{PYRITE_TYPE_NUMBER}**."}, "getcaptureprogress": {"summary": "Returns a **%{PYRITE_TYPE_NUMBER}** from zero to one corresponding to the capture progress of the provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "getpreviousownerteamid": {"summary": "Returns the previous owner **%{PYRITE_TYPE_TEAMID}** corresponding to the provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "getownerprogressteamid": {"summary": "Returns the **%{PYRITE_TYPE_TEAMID}** of the team currently capturing the provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "getcurrentownerteamid": {"summary": "Returns the current owner **%{PYRITE_TYPE_TEAMID}** corresponding to the provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "getplayersonpoint": {"summary": "Returns a **%{PYRITE_TYPE_ARRAY}** of all players within the boundaries of a provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "setcapturepointowner": {"summary": "Claims the provided **%{PYRITE_TYPE_CAPTUREPOINT}** for the specified **%{PYRITE_TYPE_TEAMID}**."}, "capturepointneutralizationtime": {"summary": "Sets the neutralization time for target **%{PYRITE_TYPE_CAPTUREPOINT}** to the provided **%{PYRITE_TYPE_NUMBER}**."}, "capturepointcapturingtime": {"summary": "Sets the capturing time for target **%{PYRITE_TYPE_CAPTUREPOINT}** to the provided **%{PYRITE_TYPE_NUMBER}**."}, "repairvehicle": {"summary": "Repairs target **%{PYRITE_TYPE_VEHICLE}** by the provided **%{PYRITE_TYPE_NUMBER}** amount.  \n  \n_Note: When repairing a vehicle with a max health multiplier not equal to 1, the amount of health they receive will scale with their max health multiplier value._"}, "damagevehicle": {"summary": "Damages the target **%{PYRITE_TYPE_VEHICLE}** by the provided **%{PYRITE_TYPE_NUMBER}** amount."}, "worldiconsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_WORLDICONS}** from the collection of world icon entities."}, "worldiconimagesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_WORLDICONIMAGES}** from the collection of world icon images."}, "voiceoversitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_VOICEOVERS}** from the collection of voice overs."}, "locationalsoundsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_LOCATIONALSOUNDS}** from the collection of locational sounds."}, "triggeraudioatlocation": {"summary": "Plays a selected **%{PYRITE_TYPE_ENUM_LOCATIONALSOUNDS}** at a specified position."}, "triggeraudio": {"summary": "Plays a provided **%{PYRITE_TYPE_ENUM_SOUNDS}** or **%{PYRITE_TYPE_ENUM_VOICEOVERS}** to a provided **%{PYRITE_TYPE_TEAMID}**."}, "soundsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_SOUNDS}** from the collection of sounds."}, "setworldicontext": {"summary": "Sets the text property for a provided **%{PYRITE_TYPE_ENUM_WORLDICONS}**."}, "setworldiconposition": {"summary": "Sets the in-world position of a provided **%{PYRITE_TYPE_ENUM_WORLDICONS}**."}, "setworldiconowner": {"summary": "Sets the owner **%{PYRITE_TYPE_TEAMID}** of the provided **%{PYRITE_TYPE_ENUM_WORLDICONS}**."}, "setworldiconimage": {"summary": "Sets the image property of a **%{PYRITE_TYPE_ENUM_WORLDICONS}** to the selected **%{PYRITE_TYPE_ENUM_WORLDICONIMAGES}**."}, "setneutralizationmultiplier": {"summary": "Sets the neutralization time multiplier for target **%{PYRITE_TYPE_CAPTUREPOINT}** to the provided **%{PYRITE_TYPE_NUMBER}**."}, "enableworldicontext": {"summary": "Enables or disables the text for a provided **%{PYRITE_TYPE_ENUM_WORLDICONS}**.  \n  \n_Note: There is no default text, and will need to be set before or after this property is enabled to appear_."}, "enableworldiconimage": {"summary": "Enables or disables the image for a provided **%{PYRITE_TYPE_ENUM_WORLDICONS}**."}, "enableticketbleedacceleration": {"summary": "Enables or disables ticket bleed acceleration for both teams. Ticket bleed acceleration is on by default and only comes into effect if one team owns all sectors for about 60 seconds."}, "enablehq": {"summary": "Enables or disables a headquarters specified by the provided **%{PYRITE_TYPE_TEAMID}** and **%{PYRITE_TYPE_NUMBER}** index.  \n  \n_Note: The index begins counting at 0_."}, "removeplayerinventoryatslot": {"summary": "Removes the inventory from a target **%{PYRITE_TYPE_PLAYER}** at the provided **%{PYRITE_TYPE_ENUM_INVENTORYSLOTS}**."}, "removeplayerinventory": {"summary": "Removes a specified inventory item from a target **%{PYRITE_TYPE_PLAYER}** if that item is equipped."}, "setmcomfusetime": {"summary": "Sets the fuse time (in seconds) for target **%{PYRITE_TYPE_MCOM}** to the provided **%{PYRITE_TYPE_NUMBER}**"}, "getremainingfusetime": {"summary": "Returns the remaining fuse time (in seconds) on the provided **%{PYRITE_TYPE_MCOM}**."}, "getmcomstate": {"summary": "Returns the value of the target **%{PYRITE_TYPE_MCOM}** state."}, "getcapturepointposition": {"summary": "Returns the in-world position of the provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "eventmcom": {"summary": "Returns a **%{PYRITE_TYPE_MCOM}** payload from the **%{PYRITE_RULE}** **%{PYRITE_EVENT}** context."}, "eventdamagetypecompare": {"summary": "Returns a **%{PYRITE_TYPE_BOOLEAN}** indicating if the victim was damaged by the provided **%{PYRITE_TYPE_DAMAGETYPE}**."}, "eventdamagetype": {"summary": "Returns the **%{PYRITE_TYPE_DAMAGETYPE}** of the victim from the **%{ID_ARRIVAL_MODBUILDER_EVENT_ONPLAYERDAMAGED}** **%{PYRITE_EVENT}** context."}, "enablecapturing": {"summary": "Enables or disables capturing a provided **%{PYRITE_TYPE_CAPTUREPOINT}**."}, "typesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_TYPES}** from the collection of all object types."}, "playerdamagetypesitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_PLAYERDAMAGETYPES}** from the collection of all possible damage types."}, "mcomstateboolitem": {"summary": "Returns the **%{PYRITE_TYPE_ENUM_MCOMSTATEBOOL}** of the selected **%{PYRITE_TYPE_BOOLEAN}**-based MCOM property."}, "mcomsitem": {"summary": "Returns a **%{PYRITE_TYPE_ENUM_MCOMS}** from the collection of all possible MCOMs."}, "istype": {"summary": "Returns %{help.common.value-true} if the provided value is equal to the specified **%{PYRITE_TYPE_ENUM_TYPES}**."}, "allmcoms": {"summary": "Returns an **%{PYRITE_TYPE_ARRAY}** of all MCOMs within a game."}, "getargument": {"summary": "Returns the value of the argument that is passed into the **%{PYRITE_SUBROUTINE}**. The list of available parameters will populate once this block is placed inside the **%{PYRITE_SUBROUTINE}**."}, "classgadgetsitem": {"summary": "Returns an **%{PYRITE_TYPE_ENUM_CLASSGADGETS}** from the collection of all class gadgets."}}, "PYRITE_TYPE_ANYTYPE": "Any Type", "PYRITE_TYPE_SQUADID": "SquadId", "PYRITE_TYPE_VARIABLE": "Variable", "PYRITE_TYPE_MESSAGE": "Message", "PYRITE_TYPE_ARRAY": "Array", "PYRITE_TYPE_VECTOR": "Vector", "PYRITE_TYPE_TEAMID": "TeamId", "PYRITE_TYPE_PLAYER": "Player", "PYRITE_TYPE_BOOLEAN": "Bool", "PYRITE_TYPE_NUMBER": "Number", "CONTROLS_IF_MSG_ELSE": "Else", "CONTROLS_IF_MSG_ELSEIF": "Else If", "PYRITE_TOOLBOX_INVENTORY": "INVENTORY", "PYRITE_TOOLBOX_INPUTS": "INPUTS", "PYRITE_TOOLBOX_MESSAGES": "MESSAGES", "PYRITE_TOOLBOX_GENERAL": "GENERAL", "PYRITE_TOOLBOX_DEPLOY": "DEPLOY", "PYRITE_CONVENIENCE_REMOVEFROMARRAY": "RemoveFromArray", "PYRITE_CONVENIENCE_INDEXOFARRAYVALUE": "IndexOfArrayValue", "PYRITE_CONVENIENCE_ARRAYCONTAINS": "ArrayContains", "PYRITE_CONTROL_BY": "By", "PYRITE_CONTROL_TO": "To", "PYRITE_CONTROL_FROM": "From", "PYRITE_MANAGE_VARIABLES": "Manage Variables", "PYRITE_CREATE_SUBROUTINE": "Create Subroutine", "PYRITE_SEARCH_PLACEHOLDER": "SEARCH...", "PYRITE_TYPE_DEATHTYPE": "DeathType", "PYRITE_TYPE_HARDWAREID": "HardwareId", "PYRITE_TYPE_ENUM_PLAYERDEATHTYPES": "DeathTypesItem", "PYRITE_TYPE_ENUM_FACTIONS": "FactionsItem", "PYRITE_TYPE_ENUM_CUSTOMMESSAGES": "CustomMessageSlotsItem", "PYRITE_TYPE_ENUM_INVENTORYSLOTS": "PlayerInventorySlotsItem", "PYRITE_TYPE_ENUM_SOLDIERKITS": "PlayerSoldiersItem", "PYRITE_TYPE_ENUM_SOLDIERSTATEVECTOR": "PlayerStateVectorItem", "PYRITE_TYPE_ENUM_SOLDIERSTATENUMBER": "PlayerStateNumberItem", "PYRITE_TYPE_ENUM_SOLDIERSTATEBOOL": "PlayerStateBoolItem", "PYRITE_TYPE_ENUM_MEDGADGETTYPES": "MedGadgetTypesItem", "PYRITE_TYPE_ENUM_RESUPPLYTYPES": "ResupplyTypesItem", "PYRITE_TYPE_ENUM_RESTRICTEDINPUTS": "InputRestrictionsItem", "PYRITE_TYPE_ENUM_INPUTTRIGGER": "InputTriggersItem", "PYRITE_TYPE_ENUM_MELEEWEAPONS": "InventoryMeleeWeaponsItem", "PYRITE_TYPE_ENUM_THROWABLES": "InventoryThrowablesItem", "PYRITE_TYPE_ENUM_OPENGADGETS": "InventoryOpenGadgetsItem", "PYRITE_TYPE_ENUM_CHARACTERGADGETS": "InventoryCharacterSpecialtiesItem", "PYRITE_TYPE_ENUM_SECONDARYWEAPONS": "InventorySecondaryWeaponsItem", "PYRITE_TYPE_ENUM_PRIMARYWEAPONS": "InventoryPrimaryWeaponsItem", "PYRITE_TYPE_STRING": "String", "PYRITE_DEPRECATED_RULE_EVENT": "Deprecated payload for this Rule Event", "PYRITE_OPTION_DEPRECATED": "{{name}} (deprecated)", "PYRITE_TYPE_VEHICLE": "Vehicle", "PYRITE_TOOLBOX_VEHICLE": "VEHICLE", "PYRITE_TYPE_ENUM_VEHICLETYPES": "VehicleTypesItem", "PYRITE_TYPE_ENUM_VEHICLES": "VehiclesItem", "PYRITE_TYPE_ENUM_MAPS": "MapsItem", "PYRITE_TYPE_ENUM_VEHICLESTATEVECTOR": "VehicleStateVectorItem", "PYRITE_TYPE_ENUM_CAPTUREPOINTS": "CapturePointsItem", "PYRITE_TYPE_CAPTUREPOINT": "CapturePoint", "PYRITE_TOOLBOX_CAPTUREPOINT": "CAPTURE POINT", "PYRITE_TOOLBOX_OBJECTIVES": "OBJECTIVE", "CONTROLS_IF_MSG_IF": "If", "PYRITE_CONTROL_FOR": "For", "FALSE": "false", "TRUE": "true", "PYRITE_TYPE_WEAPONUNLOCK": "WeaponUnlock", "PYRITE_TYPE_ENUM_LOCATIONALSOUNDS": "LocationalSoundsItem", "PYRITE_TYPE_ENUM_VOICEOVERS": "VoiceOversItem", "PYRITE_TYPE_ENUM_SOUNDS": "SoundsItem", "PYRITE_TYPE_ENUM_WORLDICONIMAGES": "WorldIconImagesItem", "PYRITE_TYPE_ENUM_WORLDICONS": "WorldIconsItem", "PYRITE_SUBROUTINE_GET_ARGUMENT": "GetSubroutineArgument", "PYRITE_TYPE_ENUM_MCOMSTATEBOOL": "MCOMStateBoolItem", "PYRITE_TYPE_ENUM_PLAYERDAMAGETYPES": "DamageTypesItem", "PYRITE_TYPE_ENUM_MCOMS": "MCOMsItem", "PYRITE_TYPE_ENUM_TYPES": "TypesItem", "PYRITE_TYPE_DAMAGETYPE": "DamageType", "PYRITE_TYPE_MCOM": "MCOM", "PYRITE_TYPE_GLOBAL": "Global", "PYRITE_TOOLBOX_MCOM": "MCOM", "PYRITE_TYPE_ENUM_CLASSGADGETS": "InventoryClassGadgetsItem"}